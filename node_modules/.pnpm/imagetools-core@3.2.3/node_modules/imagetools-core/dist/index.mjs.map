{"version":3,"file":"index.mjs","sources":["../src/lib/metadata.ts","../src/transforms/background.ts","../src/transforms/blur.ts","../src/transforms/fit.ts","../src/transforms/flatten.ts","../src/transforms/flip.ts","../src/transforms/flop.ts","../src/transforms/quality.ts","../src/transforms/progressive.ts","../src/transforms/format.ts","../src/transforms/grayscale.ts","../src/transforms/hsb.ts","../src/transforms/invert.ts","../src/transforms/kernel.ts","../src/transforms/median.ts","../src/transforms/normalize.ts","../src/transforms/position.ts","../src/transforms/resize.ts","../src/transforms/rotate.ts","../src/transforms/tint.ts","../src/builtins.ts","../src/output-formats.ts","../src/util.ts","../src/lib/parse-url.ts","../src/lib/resolve-configs.ts","../src/lib/generate-transforms.ts","../src/lib/apply-transforms.ts"],"sourcesContent":["import { Sharp } from 'sharp'\n\nexport const METADATA = Symbol('image metadata')\n\ndeclare module 'sharp' {\n  interface Sharp {\n    [METADATA]: Record<string, any>\n  }\n}\n\nexport function setMetadata(image: Sharp, key: string, value: any) {\n  image[METADATA] && (image[METADATA][key] = value)\n}\n\nexport function getMetadata(image: Sharp, key: string) {\n  return image[METADATA]?.[key]\n}\n","import { TransformOption } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface BackgroundOptions {\n  background: string\n}\n\nexport const getBackground: TransformOption<BackgroundOptions, string> = ({ background }, image) => {\n  if (typeof background !== 'string' || !background.length) return\n\n  setMetadata(image, 'background', background)\n\n  return background\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface BlurOptions {\n  blur: string\n}\n\nexport const blur: TransformFactory<BlurOptions> = (config, ctx) => {\n  let blur: number | boolean | undefined = undefined\n\n  blur = config.blur ? parseFloat(config.blur) : undefined\n  blur ||= config.blur === 'true'\n  blur ||= config.blur === ''\n\n  if (!blur) return\n\n  return function blurTransform(image) {\n    setMetadata(image, 'blur', blur)\n\n    return image.blur(blur)\n  }\n}\n","import { TransformOption } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport const fitValues = ['cover', 'contain', 'fill', 'inside', 'outside'] as const\n\nexport type FitValue = typeof fitValues[number]\n\nexport interface FitOptions {\n  fit: FitValue\n}\n\nexport const getFit: TransformOption<FitOptions, FitValue> = (config, image) => {\n  let fit: FitValue | undefined = undefined\n\n  if (config.fit && fitValues.includes(config.fit)) {\n    fit = config.fit\n  } else {\n    fit = Object.keys(config).find((k: any): k is FitValue => fitValues.includes(k) && config[k] === '')\n  }\n\n  if (!fit) return\n\n  setMetadata(image, 'fit', fit)\n\n  return fit\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\nimport { getBackground } from './background'\n\nexport interface FlattenOptions {\n  flatten: '' | 'true'\n}\n\nexport const flatten: TransformFactory<FlattenOptions> = (config, ctx) => {\n  if (config.flatten !== '' && config.flatten !== 'true') return\n\n  return function flattenTransform(image) {\n    setMetadata(image, 'flatten', true)\n\n    return image.flatten({\n      background: getBackground(config, image)\n    })\n  }\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface FlipOptions {\n  flip: '' | 'true'\n}\n\nexport const flip: TransformFactory<FlipOptions> = ({ flip }, ctx) => {\n  if (flip !== '' && flip !== 'true') return\n\n  return function flipTransform(image) {\n    setMetadata(image, 'flip', true)\n\n    return image.flip()\n  }\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface FlopOptions {\n  flop: '' | 'true'\n}\n\nexport const flop: TransformFactory<FlopOptions> = ({ flop }, ctx) => {\n  if (flop !== '' && flop !== 'true') return\n\n  return function flopTransform(image) {\n    setMetadata(image, 'flop', true)\n\n    return image.flop()\n  }\n}\n","import { TransformOption } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface QualityOptions {\n  quality: string\n}\n\nexport const getQuality: TransformOption<QualityOptions, number> = ({ quality: _quality }, image) => {\n  const quality = _quality && parseInt(_quality)\n\n  if (!quality) return\n\n  setMetadata(image, 'quality', quality)\n\n  return quality\n}\n","import { TransformOption } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface ProgressiveOptions {\n  progressive: '' | 'true'\n}\n\nexport const getProgressive: TransformOption<ProgressiveOptions> = ({ progressive }, image) => {\n  if (progressive !== '' && progressive !== 'true') return\n\n  setMetadata(image, 'progressive', true)\n\n  return true\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\nimport { getQuality } from './quality'\nimport { getProgressive } from './progressive'\n\nexport const formatValues = ['avif', 'jpg', 'jpeg', 'png', 'heif', 'heic', 'webp', 'tiff'] as const\n\nexport type FormatValue = typeof formatValues[number]\n\nexport interface FormatOptions {\n  format: FormatValue\n}\n\nexport const format: TransformFactory<FormatOptions> = (config, ctx) => {\n  let format: FormatValue | undefined = undefined\n\n  if (config.format && formatValues.includes(config.format)) {\n    format = config.format\n  } else {\n    format = Object.keys(config).find((k: any): k is FormatValue => formatValues.includes(k) && config[k] === '')\n  }\n  if (!format) return\n\n  return function formatTransform(image) {\n    setMetadata(image, 'format', format)\n\n    //@ts-ignore\n    return image.toFormat(format, {\n      quality: getQuality(config, image),\n      progressive: getProgressive(config, image)\n    })\n  }\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface GrayscaleOptions {\n  grayscale: '' | 'true'\n}\n\nexport const grayscale: TransformFactory<GrayscaleOptions> = ({ grayscale }) => {\n  if (grayscale !== '' && grayscale !== 'true') return\n\n  return function grayscaleTransform(image) {\n    setMetadata(image, 'grayscale', true)\n\n    return image.grayscale()\n  }\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface HSBOptions {\n  hue: string\n  saturation: string\n  brightness: string\n}\n\nexport const hsb: TransformFactory<HSBOptions> = (config) => {\n  const hue = config.hue && parseInt(config.hue)\n  const saturation = config.saturation && parseFloat(config.saturation)\n  const brightness = config.brightness && parseFloat(config.brightness)\n\n  if (!hue && !saturation && !brightness) return\n\n  return function hsbTransform(image) {\n    setMetadata(image, 'hue', hue)\n    setMetadata(image, 'saturation', saturation)\n    setMetadata(image, 'brightness', brightness)\n\n    return image.modulate({\n      hue: hue || 0,\n      saturation: saturation || 1,\n      brightness: brightness || 1\n    })\n  }\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface InvertOptions {\n  invert: '' | 'true'\n}\n\nexport const invert: TransformFactory<InvertOptions> = ({ invert }) => {\n  if (invert !== '' && invert !== 'true') return\n\n  return function invertTransform(image) {\n    setMetadata(image, 'invert', true)\n\n    return image.negate()\n  }\n}\n","import { TransformOption } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport const kernelValues = ['nearest', 'cubic', 'mitchell', 'lanczos2', 'lanczos3'] as const\n\nexport type KernelValue = typeof kernelValues[number]\n\nexport interface KernelOptions {\n  kernel: KernelValue\n}\n\nexport const getKernel: TransformOption<KernelOptions, KernelValue> = ({ kernel }, image) => {\n  if (kernel && kernelValues.includes(kernel)) {\n    setMetadata(image, 'kernel', kernel)\n\n    return kernel\n  }\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface MedianOptions {\n  median: string\n}\n\nexport const median: TransformFactory<MedianOptions> = (config) => {\n  const median = config.median ? parseInt(config.median) : undefined\n\n  if (!median) return\n\n  return function medianTransform(image) {\n    setMetadata(image, 'median', median)\n\n    return image.median(median)\n  }\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface NormalizeOptions {\n  normalize: '' | 'true'\n}\n\nexport const normalize: TransformFactory<NormalizeOptions> = ({ normalize }) => {\n  if (normalize !== '' && normalize !== 'true') return\n\n  return function normalizeTransform(image) {\n    setMetadata(image, 'normalize', true)\n\n    return image.normalize()\n  }\n}\n","import { TransformOption } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport const positionValues = [\n  'top',\n  'right top',\n  'right',\n  'right bottom',\n  'bottom',\n  'left bottom',\n  'left',\n  'left top',\n  'north',\n  'northeast',\n  'east',\n  'southeast',\n  'south',\n  'southwest',\n  'west',\n  'northwest',\n  'center',\n  'centre',\n  'entropy',\n  'attention'\n] as const\n\nexport const positionShorthands = [\n  'top',\n  'right top',\n  'right',\n  'right bottom',\n  'bottom',\n  'left bottom',\n  'left',\n  'left top'\n]\n\nexport type PositionValue = typeof positionValues[number]\n\nexport interface PositionOptions {\n  position: PositionValue\n}\n\nexport const getPosition: TransformOption<PositionOptions, PositionValue> = (config, image) => {\n  let position: PositionValue | undefined = undefined\n\n  if (config.position && positionValues.includes(config.position)) {\n    position = config.position\n  } else {\n    position = Object.keys(config).find(\n      (k: string): k is PositionValue => positionShorthands.includes(k) && config[k] === ''\n    )\n  }\n  if (!position) return\n\n  setMetadata(image, 'position', position)\n\n  return position\n}\n","import { getMetadata, setMetadata } from '../lib/metadata'\nimport { TransformFactory } from '../types'\nimport { getFit } from './fit'\nimport { getPosition } from './position'\nimport { getKernel } from './kernel'\nimport { getBackground } from './background'\n\nexport interface ResizeOptions {\n  width: string\n  w: string\n  height: string\n  h: string\n  aspect: string\n  ar: string\n}\n\n/**\n * This function parses a user provided aspect-ratio string into a float.\n * Valid syntaxes are `16:9` or `1.777`\n * @param aspect\n * @returns\n */\nfunction parseAspect(aspect: string): number | undefined {\n  const parts = aspect.split(':')\n\n  let aspectRatio\n  if (parts.length === 1) {\n    // the string was a float\n    aspectRatio = parseFloat(parts[0])\n  } else if (parts.length === 2) {\n    // the string was a colon delimited aspect ratio\n    const [width, height] = parts.map((str) => parseInt(str))\n\n    if (!width || !height) return undefined\n\n    aspectRatio = width / height\n  }\n  if (!aspectRatio || aspectRatio <= 0) return undefined\n  return aspectRatio\n}\n\nexport const resize: TransformFactory<ResizeOptions> = (config) => {\n  const width = parseInt(config.width || config.w || '')\n  const height = parseInt(config.height || config.h || '')\n  const aspect = parseAspect(config.aspect || config.ar || '')\n\n  if (!width && !height && !aspect) return\n\n  return function resizeTransform(image) {\n    // calculate finalWidth & finalHeight\n    const originalWidth = getMetadata(image, 'width')\n    const originalHeight = getMetadata(image, 'height')\n    const originalAspect = originalWidth / originalHeight\n\n    let finalWidth = width,\n      finalHeight = height\n\n    if (aspect && !width && !height) {\n      // only aspect was given, need to calculate which dimension to crop\n      if (aspect > originalAspect) {\n        finalHeight = originalWidth / aspect\n        finalWidth = originalWidth\n      } else {\n        finalHeight = originalHeight\n        finalWidth = originalHeight / aspect\n      }\n    } else if (!height) {\n      // only width was provided, need to calculate height\n\n      finalHeight = width / (aspect || originalAspect)\n    } else if (!width) {\n      /* only height was provided, need to calculate width */\n      finalWidth = height * (aspect || originalAspect)\n    }\n\n    setMetadata(image, 'height', finalHeight)\n    setMetadata(image, 'width', finalWidth)\n    setMetadata(image, 'aspect', aspect || originalAspect)\n\n    return image.resize({\n      width: Math.round(finalWidth) || undefined,\n      height: Math.round(finalHeight) || undefined,\n      fit: getFit(config, image),\n      position: getPosition(config, image),\n      kernel: getKernel(config, image),\n      background: getBackground(config, image)\n    })\n  }\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\nimport { getBackground } from './background'\n\nexport interface RotateOptions {\n  rotate: string\n}\n\nexport const rotate: TransformFactory<RotateOptions> = (config) => {\n  const rotate = config.rotate && parseInt(config.rotate)\n\n  if (!rotate) return\n\n  return function rotateTransform(image) {\n    setMetadata(image, 'rotate', rotate)\n\n    return image.rotate(rotate, {\n      background: getBackground(config, image)\n    })\n  }\n}\n","import { TransformFactory } from '../types'\nimport { setMetadata } from '../lib/metadata'\n\nexport interface TintOptions {\n  tint: string\n}\n\nexport const tint: TransformFactory<TintOptions> = ({ tint }) => {\n  if (typeof tint !== 'string' || !tint.length) return\n\n  return function tintTransform(image) {\n    setMetadata(image, 'tint', '#' + tint)\n\n    return image.tint('#' + tint)\n  }\n}\n","import { blur } from './transforms/blur'\nimport { flatten } from './transforms/flatten'\nimport { flip } from './transforms/flip'\nimport { flop } from './transforms/flop'\nimport { format } from './transforms/format'\nimport { grayscale } from './transforms/grayscale'\nimport { hsb } from './transforms/hsb'\nimport { invert } from './transforms/invert'\nimport { median } from './transforms/median'\nimport { normalize } from './transforms/normalize'\nimport { resize } from './transforms/resize'\nimport { rotate } from './transforms/rotate'\nimport { tint } from './transforms/tint'\n\nexport const builtins = [\n  blur,\n  flatten,\n  flip,\n  flop,\n  format,\n  grayscale,\n  hsb,\n  invert,\n  median,\n  normalize,\n  resize,\n  rotate,\n  tint\n]\n","import type { ImageConfig, OutputFormat, Picture, Source } from './types'\n\nexport const urlFormat: OutputFormat = () => (metadatas) => {\n  const urls: string[] = metadatas.map((metadata) => metadata.src as string)\n\n  return urls.length == 1 ? urls[0] : urls\n}\n\nexport const srcsetFormat: OutputFormat = () => (metadatas) => {\n  const sources = metadatas.map((meta) => `${meta.src} ${meta.width}w`)\n\n  return sources.join(', ')\n}\n\nexport const metadataFormat: OutputFormat = (whitelist) => (metadatas) => {\n  if (whitelist) {\n    metadatas = metadatas.map((cfg) => Object.fromEntries(Object.entries(cfg).filter(([k]) => whitelist.includes(k))))\n  }\n\n  metadatas.forEach(m => delete m.image)\n\n  return metadatas.length === 1 ? metadatas[0] : metadatas\n}\n\nconst metadataToSource = (m: ImageConfig) => ({ src: m.src, w: m.width } as Source);\n\n/** normalizes the format for use in mime-type */\nconst format = (m: ImageConfig) => (m.format as string).replace('jpg', 'jpeg');\n\nexport const sourceFormat: OutputFormat = () => (metadatas) => {\n  return metadatas.map(m => metadataToSource(m));\n}\n\n/** fallback format should be specified last */\nexport const pictureFormat: OutputFormat = () => (metadatas) => {\n  const fallbackFormat = [...new Set(metadatas.map((m) => format(m)))].pop();\n\n  let largestFallback;\n  let largestFallbackSize = 0;\n  let fallbackFormatCount = 0;\n  for (let i = 0; i < metadatas.length; i++) {\n    const m = metadatas[i];\n    if (format(m) === fallbackFormat) {\n      fallbackFormatCount++;\n      if (m.width as number > largestFallbackSize) {\n        largestFallback = m;\n        largestFallbackSize = m.width as number;\n      }  \n    }\n  }\n\n  const sources: Record<string, Source[]> = {};\n  for (let i = 0; i < metadatas.length; i++) {\n    const m = metadatas[i];\n    const f = format(m);\n    // we don't need to create a source tag for the fallback format if there is\n    // only a single image in that format\n    if (f === fallbackFormat && fallbackFormatCount < 2) {\n      continue;\n    }\n    if (sources[f]) {\n      sources[f].push(metadataToSource(m));\n    } else {\n      sources[f] = [metadataToSource(m)]\n    }\n  };\n\n  const result: Picture = {\n    sources,\n    // the fallback should be the largest image in the fallback format\n    // we assume users should never upsize an image because that is just wasted\n    // bytes since the browser can upsize just as well\n    fallback: {\n      src: largestFallback?.src as string,\n      w: largestFallback?.width as number,\n      h: largestFallback?.height as number\n    }\n  };\n  return result;\n}\n\nexport const builtinOutputFormats = {\n  url: urlFormat,\n  source: sourceFormat,\n  srcset: srcsetFormat,\n  picture: pictureFormat,\n  metadata: metadataFormat,\n  meta: metadataFormat\n}\n","import sharp from 'sharp'\nimport { ImageConfig } from './types'\nimport { createHash } from 'crypto'\n\nexport function loadImage(path: string) {\n  return sharp(path)\n}\n\nexport function generateImageID(url: URL, config: ImageConfig) {\n  const baseURL = url.host ? new URL(url.origin + url.pathname) : new URL(url.protocol + url.pathname)\n\n  return createHash('sha1').update(baseURL.href).update(JSON.stringify(config)).digest('hex')\n}\n","export function parseURL(rawURL: string) {\n  return new URL(rawURL.replace(/#/g, '%23'), 'file://')\n}\n\nexport function extractEntries(searchParams: URLSearchParams) {\n  const entries: Array<[string, string[]]> = []\n\n  for (const [key, value] of searchParams) {\n    entries.push([key, value.split(';')])\n  }\n\n  return entries\n}\n","import { OutputFormat } from '..'\n\n/**\n * This function calculates the cartesian product of two or more arrays and is straight from stackoverflow ;)\n * Should be replaced with something more legible but works for now.\n * @internal\n */\nexport const cartesian = (...a: any[]) =>\n  a.reduce((a: any, b: any) => a.flatMap((d: any) => b.map((e: any) => [d, e].flat())))\n\n/**\n * This function builds up all possible combinations the given entries can be combined\n * an returns it as an array of objects that can be given to a the transforms.\n * @param entries The url parameter entries\n * @returns An array of directive options\n */\nexport function resolveConfigs(\n  entries: Array<[string, string[]]>,\n  outputFormats: Record<string, OutputFormat>\n): Record<string, string | string[]>[] {\n  // create a new array of entries for each argument\n  const singleArgumentEntries = entries\n    .filter(([k]) => !(k in outputFormats))\n    .map(([key, values]) => values.map<[[string, string]]>((v) => [[key, v]]))\n\n  // do a cartesian product on all entries to get all combainations we need to produce\n  const combinations = singleArgumentEntries\n    // .filter(([key]) => !(key[0][0] in outputFormats))\n    .reduce((prev, cur) => (prev.length ? cartesian(prev, cur) : cur), [])\n\n  const metadataAddons = entries.filter(([k]) => k in outputFormats)\n\n  // and return as an array of objects\n  const out: Record<string, string | string[]>[] = combinations.map((options) =>\n    Object.fromEntries([...options, ...metadataAddons])\n  )\n\n  return out.length ? out : [Object.fromEntries(metadataAddons)]\n}\n","import { ImageTransformation, ImageConfig, TransformFactory, TransformFactoryContext } from '../types'\n\nexport function generateTransforms(config: ImageConfig, factories: TransformFactory[]) {\n  const transforms: ImageTransformation[] = []\n  const parametersUsed = new Set<string>()\n  const warnings: string[] = []\n\n  const context: TransformFactoryContext = {\n    useParam: (k) => parametersUsed.add(k),\n    warn: (m) => warnings.push(m)\n  }\n\n  for (const directive of factories) {\n    const transform = directive(config, context)\n\n    if (typeof transform === 'function') transforms.push(transform)\n  }\n\n  return {\n    transforms,\n    parametersUsed,\n    warnings\n  }\n}\n","import { Sharp } from 'sharp'\nimport { ImageTransformation, TransformResult } from '../types'\nimport { METADATA } from './metadata'\n\nexport async function applyTransforms(\n  transforms: ImageTransformation[],\n  image: Sharp,\n  removeMetadata = true\n): Promise<TransformResult> {\n  image[METADATA] = await image.metadata()\n\n  if (removeMetadata) {\n    // delete the private metadata\n    delete image[METADATA].exif\n    delete image[METADATA].iptc\n    delete image[METADATA].xmp\n    delete image[METADATA].tifftagPhotoshop\n    delete image[METADATA].icc\n  } else {\n    image.withMetadata()\n  }\n\n  for (const transform of transforms) {\n    image = await transform(image)\n  }\n\n  return {\n    image,\n    metadata: image[METADATA]\n  }\n}\n"],"names":["format"],"mappings":"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"}