import { TypeGuard } from 'typesafe-utils';
export declare type Arg = {
    key: string;
    formatters?: string[] | undefined;
    pluralOnly?: boolean | undefined;
    optional?: boolean | undefined;
};
export declare type TypeInformation = {
    types: string[];
    optional?: boolean | undefined;
};
export declare type Types = {
    [key: string]: TypeInformation;
};
export declare type JsDocInfos = {
    [key: string]: JsDocInfo;
};
export declare type JsDocInfo = {
    text: string;
    types: Types;
    pluralOnlyArgs: string[];
};
export declare type ParsedResultEntry = {
    key: string;
    text: string;
    textWithoutTypes: string;
    args?: Arg[];
    types: Types;
    parentKeys: string[];
};
export declare type ParsedResult = ParsedResultEntry | {
    [key: string]: ParsedResult[];
};
export declare const isParsedResultEntry: <T extends ParsedResult>(entry: T) => entry is TypeGuard<ParsedResultEntry, T>;
