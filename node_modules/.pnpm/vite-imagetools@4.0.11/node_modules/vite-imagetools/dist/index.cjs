'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var imagetoolsCore = require('imagetools-core');
var path = require('path');
var pluginutils = require('@rollup/pluginutils');

const defaultOptions = {
    include: [
        '**/*.{heic,heif,avif,jpeg,jpg,png,tiff,webp,gif}',
        '**/*.{heic,heif,avif,jpeg,jpg,png,tiff,webp,gif}?*'
    ],
    exclude: 'public/**/*',
    silent: false,
    removeMetadata: true
};
function imagetools(userOptions = {}) {
    const pluginOptions = { ...defaultOptions, ...userOptions };
    const filter = pluginutils.createFilter(pluginOptions.include, pluginOptions.exclude);
    const transformFactories = pluginOptions.extendTransforms ? pluginOptions.extendTransforms(imagetoolsCore.builtins) : imagetoolsCore.builtins;
    const outputFormats = pluginOptions.extendOutputFormats
        ? pluginOptions.extendOutputFormats(imagetoolsCore.builtinOutputFormats)
        : imagetoolsCore.builtinOutputFormats;
    let viteConfig;
    const generatedImages = new Map();
    return {
        name: 'imagetools',
        enforce: 'pre',
        configResolved(cfg) {
            viteConfig = cfg;
        },
        async load(id) {
            var _a, _b, _c, _d, _e, _f;
            if (!filter(id))
                return null;
            const srcURL = imagetoolsCore.parseURL(id);
            let directives = srcURL.searchParams;
            if (typeof pluginOptions.defaultDirectives === 'function') {
                directives = new URLSearchParams([...pluginOptions.defaultDirectives(srcURL), ...srcURL.searchParams]);
            }
            else if (pluginOptions.defaultDirectives) {
                directives = new URLSearchParams([...pluginOptions.defaultDirectives, ...srcURL.searchParams]);
            }
            if (!directives.toString())
                return null;
            const parameters = imagetoolsCore.extractEntries(directives);
            const imageConfigs = (_b = (_a = pluginOptions.resolveConfigs) === null || _a === void 0 ? void 0 : _a.call(pluginOptions, parameters, outputFormats)) !== null && _b !== void 0 ? _b : imagetoolsCore.resolveConfigs(parameters, outputFormats);
            const img = imagetoolsCore.loadImage(decodeURIComponent(srcURL.pathname));
            const outputMetadatas = [];
            for (const config of imageConfigs) {
                const id = imagetoolsCore.generateImageID(srcURL, config);
                const { transforms } = imagetoolsCore.generateTransforms(config, transformFactories);
                const { image, metadata } = await imagetoolsCore.applyTransforms(transforms, img.clone(), pluginOptions.removeMetadata);
                generatedImages.set(id, image);
                if (!this.meta.watchMode) {
                    const fileName = path.basename(srcURL.pathname, path.extname(srcURL.pathname)) + `.${metadata.format}`;
                    const fileHandle = this.emitFile({
                        name: fileName,
                        source: await image.toBuffer(),
                        type: 'asset'
                    });
                    metadata.src = `__VITE_ASSET__${fileHandle}__`;
                }
                else {
                    metadata.src = path.posix.join('/@imagetools', id);
                }
                metadata.image = image;
                outputMetadatas.push(metadata);
            }
            let outputFormat = imagetoolsCore.urlFormat();
            for (const [key, format] of Object.entries(outputFormats)) {
                if (directives.has(key)) {
                    const params = (_c = directives
                        .get(key)) === null || _c === void 0 ? void 0 : _c.split(';').filter((v) => !!v);
                    outputFormat = format((params === null || params === void 0 ? void 0 : params.length) ? params : undefined);
                    break;
                }
            }
            return pluginutils.dataToEsm(outputFormat(outputMetadatas), {
                namedExports: (_e = (_d = viteConfig.json) === null || _d === void 0 ? void 0 : _d.namedExports) !== null && _e !== void 0 ? _e : true,
                compact: (_f = !!viteConfig.build.minify) !== null && _f !== void 0 ? _f : false,
                preferConst: true
            });
        },
        configureServer(server) {
            server.middlewares.use((req, res, next) => {
                var _a;
                if ((_a = req.url) === null || _a === void 0 ? void 0 : _a.startsWith('/@imagetools/')) {
                    const [, id] = req.url.split('/@imagetools/');
                    const image = generatedImages.get(id);
                    if (!image)
                        throw new Error(`vite-imagetools cannot find image with id "${id}" this is likely an internal error`);
                    if (pluginOptions.removeMetadata === false) {
                        image.withMetadata();
                    }
                    res.setHeader('Content-Type', `image/${imagetoolsCore.getMetadata(image, 'format')}`);
                    res.setHeader('Cache-Control', 'max-age=360000');
                    return image.clone().pipe(res);
                }
                next();
            });
        }
    };
}

exports.imagetools = imagetools;
//# sourceMappingURL=index.cjs.map
